
module('examples', 'demo')

module('features', 'mnist')
module('features', 'squeeze')
module('features', 'recognize')
module('features', 'pytorch')

module('library', 'core')
module('library', 'api')
module('library', 'logging')
module('library', 'model-option-loader')
module('library', 'common')
module('library', 'service')

module('runtime', 'tensorflow-lite')
module('runtime', 'mnn')
module('runtime', 'ncnn')
module('runtime', 'pytorch')

// -------------------------------------------------------------------------------------------------

// NOTE：全局设置开发模式，AoE内部开发使用工程依赖管理
gradle.ext.aoeDevEnabled = false
if (gradle.ext.has("aoeDevEnabled") && gradle.ext.aoeDevEnabled) {
    apply from: 'dev_settings.gradle'
}

/**
 * 模组定义函数
 * @param group
 * @param name
 * @return
 */
def module(String group, String name) {
    include(":$group-$name")
    String path = getTemplateModuleDir(group) + '/' + name
    project(":$group-$name").projectDir = file("$path")
}

/**
 * 约束工程模组结构
 * @param group
 * @return
 */
String getTemplateModuleDir(String group) {
    switch (group) {
        case 'examples':
            return 'demo'
        case 'features':
            return 'demo/features'
        case 'library':
            return 'aoe'
        case 'runtime':
            return 'third_party'
    }
}