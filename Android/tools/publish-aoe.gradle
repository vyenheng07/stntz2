/**
 * AoE 一键发布脚本
 * @author noctis
 */
class PublishAoePlugin implements Plugin<Project> {

    private static List<String> getAoeDenpendencies(Project proj) {
        List<String> result = new ArrayList<>();

        proj.configurations.findAll {
            !it.dependencies.empty
        }.each { c ->
            c.dependencies.findAll {
                "com.didi.aoe".equals(it.group)
            }.each {
                result.add(it.name)
            }

        }
        return result
    }

    private static int getLevel(String name) {
        if (name.startsWith("library")) {
            return 0
        } else if (name.startsWith("runtime")) {
            return 1
        } else if (name.startsWith("extensions")) {
            return 2
        } else if (name.startsWith("features")) {
            return 3
        }
    }

    @Override
    void apply(Project project) {


        project.gradle.projectsEvaluated {
            Set<Project> libraryModules = project.subprojects.findAll {
                it.plugins.findPlugin("com.android.library")
            }
            // 根据依赖关系进行排序
            List<Project> modules = libraryModules.toSorted(new Comparator<Project>() {
                @Override
                int compare(Project pl, Project pr) {
                    int result = 0;

                    List<String> plDenps = getAoeDenpendencies(pl);
                    if (plDenps.contains(pr.name)) {
                        result = 1
                    } else {
                        List<String> prDenps = getAoeDenpendencies(pr);
                        if (prDenps.contains(pl.name)) {
                            result = -1
                        } else {
                            // 相互不直接依赖，根据layer比较优先级
                            result = getLevel(pl.name) - getLevel(pr.name)

                        }
                    }

                    return result
                }
            })
            println modules

            if (modules != null && !modules.isEmpty()) {
                project.task('publishAoe') {

                    modules.each { libraryModule ->
                        Task bintrayUploadTask = libraryModule.tasks.find {
                            'bintrayUpload'.equals(it.name)
                        }
                        if (bintrayUploadTask != null) {
                            println "[bintrayUpload] $libraryModule.name ".padRight(60, '*')

                            bintrayUploadTask.actions.each {
                                it.execute(bintrayUploadTask)
                            }

                        }
                    }

                }
            }
        }

    }
}


if (project.ext.has("aoePublishEnabled") && project.ext.aoePublishEnabled) {
    apply plugin: PublishAoePlugin
}



