apply plugin: 'de.undercouch.download'

/*
 * Copyright 2019 The AoE Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// 下载文件临时文件夹
project.ext.TMP_DIR = project.buildDir.toString() + '/downloads/'

// 下载模型的 target路径：下载地址
def models = [
        // mnist
        '../demo/src/main/assets': [
//                'https://img0.didiglobal.com/static/starfile/node20190926/895f1e95e30aba5dd56d6f2ccf768b57/APWmDl1XCf1569496524271.zip', // mnist
                'https://img0.didiglobal.com/static/starfile/node20190805/895f1e95e30aba5dd56d6f2ccf768b57/fm2gKZ37I11565012061785.zip', // squeeze
        ]

]

task downloadFiles(dependsOn: assemble) {
    def tmpDir = new File(project.ext.TMP_DIR)
    if (!tmpDir.exists()) {
        tmpDir.mkdirs()
    }
    models.each { path, urls ->
        for (modelUrl in urls) {
            def localFile = modelUrl.split("/")[-1]
            if (!(new File(project.ext.TMP_DIR + '/' + localFile)).exists()) {
                download {
                    println "Downloading ${localFile} from ${modelUrl}"
                    src modelUrl
                    dest tmpDir
                    onlyIfModified true
                }
            }
        }
    }

}

task extractModels(dependsOn: downloadFiles) {
    models.each { path, urls ->

        println "extract models ${urls} into ${path}"

        copy {
            for (f in urls) {
                def localFile = f.split("/")[-1]
                def localExt = localFile.split("[.]")[-1]
                if (localExt == "tgz") {
                    from tarTree(project.ext.TMP_DIR + '/' + localFile)
                } else {
                    from zipTree(project.ext.TMP_DIR + '/' + localFile)
                }
            }

            into file(projectDir.toString() + '/' + path)
            fileMode 0644
            exclude '**/LICENSE'

        }
    }

}


